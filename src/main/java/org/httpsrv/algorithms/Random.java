package org.httpsrv.algorithms;

import java.security.SecureRandom;
import org.httpsrv.conf.Config;

public final class Random {
    private static final SecureRandom secureRandom = new SecureRandom();

    /**
     * Creates a special id for captcha.
     * @param deviceFingerprint The given device fp.
     * @return The hash which is the id.
     */
    public static String createRiskyId(String deviceFingerprint) {
        try {
            String input = deviceFingerprint + "|" + Config.getPropertiesVar().privateKey + "|" + (System.currentTimeMillis() / 1000);
            String encoded = AES.encrypt(input);
            return HEX.bytesToHex(encoded.getBytes());

        }catch (Exception e) {
            return "";
        }
    }

    /**
     * Creates a new risky id and checks if is equal with second id.
     * @param deviceFingerprint The device fp.
     * @param encoded The other risky id.
     * @return Are they equal?
     */
    public static Boolean compareRiskyId(String deviceFingerprint, String encoded) {
        String decryptedData = AES.decrypt(new String(HEX.hexToBytes(encoded)));

        String[] parts = decryptedData.split("\\|");
        if (parts.length != 3) {
            return false;
        }

        String originalFingerprint = parts[0];
        long timestamp = Long.parseLong(parts[2]);

        if (!originalFingerprint.equals(deviceFingerprint)) {
            return false;
        }

        long currentTimestamp = System.currentTimeMillis() / 1000;
        return Math.abs(currentTimestamp - timestamp) <= 60;
    }

    /**
     * Generates a new random bytes by given length.
     * @param length The given bytes size.
     * @return The generated bytes.
     */
    public static String generateStr(int length) {
        byte[] bytes = new byte[length];
        secureRandom.nextBytes(bytes);
        return HEX.bytesToHex(bytes);
    }

    /**
     * Generates a new verification code.
     */
    public static String generateCode() {
        return String.format("%06d", secureRandom.nextInt(1000000));
    }
}